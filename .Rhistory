# Calculate the BMI of a person who is 180 pounds and 70 inches tall
calculate_bmi(180, 70)
# Calculate body mass index (kg/m^2) given the input in pounds (lbs) and
# inches (inches)
calculate_bmi <- function(lbs, inches) {
height_in_meters <- inches * 0.0254
weight_in_kg <- lbs * 0.453592
bmi <- weight_in_kg / height_in_meters ^ 2
bmi
}
# Calculate the BMI of a person who is 180 pounds and 70 inches tall
calculate_bmi(180, 70)
test_food_temp(119) # "This porridge is just right!"
# Function to determine if you should eat porridge
test_food_temp <- function(temp) {
if (temp > 120) {
status <- "This porridge is too hot!"
} else if (temp < 70) {
status <- "This porridge is too cold!"
} else {
status <- "This porridge is just right!"
}
status # return the status
}
# Use the function on different temperatures
test_food_temp(150) # "This porridge is too hot!"
test_food_temp(60)  # "This porridge is too cold!"
test_food_temp(119) # "This porridge is just right!"
# Function to determine if you should eat porridge
test_food_temp <- function(temp) {
if (temp > 120) {
status <- "This porridge is too hot!"
} else if (temp < 70) {
status <- "This porridge is too cold!"
} else {
status <- "This porridge is just right!"
}
status # return the status
}
# Use the function on different temperatures
test_food_temp(150) # "This porridge is too hot!"
test_food_temp(60)  # "This porridge is too cold!"
test_food_temp(119) # "This porridge is just right!"
# Call the function by names of the arguments.
new.function(a = 11, b = 5, c = 3)
# Create a function with arguments.
calculate <- function(a,b,c) {
result <- a * b + c
print(result)
}
# Call the function by position of arguments.
calculate(5,3,11)
# Call the function by names of the arguments.
new.function(a = 11, b = 5, c = 3)
Call the function by names of the arguments.
#
# Create a function with arguments.
calculate <- function(a,b,c) {
result <- a * b + c
print(result)
}
# Call the function by position of arguments.
calculate(5,3,11)
# Call the function by names of the arguments.
#new.function(a = 11, b = 5, c = 3)
# Create a function with no arguments.
printnum<-function(){
result<-12
print(result)
}
printnum()
# Create a function with arguments.
printnum<-function(a,b,c){
result<-a*b+c
print(result)
}
# Call the function by position of arguments.
printnum(2,1,3)
# Create a function with arguments.
printnum<-function(a,b,c){
result<-a*b+c
print(result)
}
printnum(2,1, sqrt(3))
# Create a function with arguments.
printnum<-function(a,b,c){
result<-a*b+c
print(result)
}
value3<-sqrt(3)
printnum(2,1, value3)
value<-printnum(2,1, value3)
result2<-value+3
print(result2)
value<-printnum(2,1, value3)
result2<-value+3
print(result2)
?sqrt
?min
?sqrt
?min
printnum<-function(a=2,b=1,c){
result<-a*b+c
print(result)
}
value<-printnum(,,value3)
value<-printnum(value3)
value<-printnum(,,value3)
result2<-value+3
value<-printnum(10,5,value3)
printnum<-function(a=2,b=1,c){
result<-a*b+c
print(result)
}
value<-printnum(,,value3)
value<-printnum(10,13,value3)
print(6)
x=print(6)
print(x)
# A function named `make_full_name` that takes two arguments
# and returns the "full name" made from them
make_full_name <- function(first_name, last_name) {
# Function body: perform tasks in here
full_name <- paste(first_name, last_name)
# Functions will *return* the value of the last line
full_name
}
# Call the `make_full_name()` function with the values "Alice" and "Kim"
my_name <- make_full_name("Alice", "Kim") # returns "Alice Kim" into `my_name`
print(my_name)
make_full_name <- function(first_name, last_name) {
full_name <- paste(first_name, last_name)
View(make_full_name)
full_name
my_name <- make_full_name("Alice", "Kim") # returns "Alice Kim" into `my_name`
print(my_name)
# Create a function with arguments.
printnum<-function(a=2,b=1,c){
result<-a*b+c
print(result)
}
# Call the function by position of arguments.
printnum(2,1,3)
# Call the function by position of arguments and inner function.
value3<-sqrt(3)
value<-printnum(10,13,value3)
result2<-value+3
print(result2)
?sqrt
?min
z
test_food_temp <- function(temp) {
if (temp > 120) {
status <- "This porridge is too hot!"
} else if (temp < 70) {
status <- "This porridge is too cold!"
} else {
status <- "This porridge is just right!"
}
status # return the status
}
# Use the function on different temperatures
test_food_temp(150) # "This porridge is too hot!"
print(status)
# Function to determine if you should eat porridge
test_food_temp <- function(temp) {
if (temp > 120) {
status <- "This porridge is too hot!"
} else if (temp < 70) {
status <- "This porridge is too cold!"
} else {
status <- "This porridge is just right!"
}
status # return the status
}
# Function to determine if you should eat porridge
test_food_temp <- function(temp) {
if (temp > 120) {
status <- "This porridge is too hot!"
} else if (temp < 70) {
status <- "This porridge is too cold!"
} else {
status <- "This porridge is just right!"
}
status # return the status
}
?sqrt
knitr::opts_chunk$set(echo = TRUE)
summary(cars)
plot(pressure)
library("pscl")          # in each relevant script
install.packages("dplyr") # once per machine
library("dplyr")          # in each relevant script
# Install the `pscl` package to use the `presidentialElections` data frame
install.packages("pscl") # on
library("pscl")          # in each relevant script
# You should now be able to interact with the data set
View(presidentialElections)
str(presidentialElections)
?flights          # read the available documentation
dim(flights)      # check the number of rows/columns
colnames(flights) # inspect the column names
View(flights)
library("nycflights13")          # in each relevant script
# Getting to know the data set
?flights          # read the available documentation
"9"> "z"
type("9")
asc("9")
?asc
asc(9)
"9" > "10"
9>10
library("dimond")
View(diamonds)
library('ggplot2')
diamonds
View(diamonds)
?diamonds
?mpg
knitr::opts_chunk$set(echo = TRUE)
library('ggplot2')
ggplot(data = mpg)
?diamonds
?mpg
View(mpg)
View(diamonds)
ggplot(data = diamonds) +
geom_point(mapping = aes(x = carat, y = price))
ggplot(data = diamonds) +
geom_point(mapping = aes(x = color, y = cut))
ggplot(data = diamonds) +
geom_point(mapping = aes(x = carat, y = price, color = cut))
?diamonds
?diamonds
ggplot(data = diamonds) +
geom_point(mapping = aes(x = carat, y = price, color = color))
ggplot(data = diamonds, aes(x = color))
#ggplot(data = diamonds) +
#geom_point(mapping = aes(x = carat, y = price, color = color))
ggplot(data = diamonds) +
geom_point(mapping = aes(x = carat, y = price, color = color))
knitr::opts_chunk$set(echo = TRUE)
library('ggplot2')
ggplot(data = mpgpie) +
geom_bar(mapping = aes(x = cartype, fill = class), width = 1, position = "stack") +
labs(title = "Car Type", x = NULL, y = NULL, fill = NULL)
ggplot(data = diamonds) +
geom_bar(mapping = aes(x = cut, fill = clarity), position = "stack")+
labs(title = "Diamond Cut Quality and Clarity", x = "Diamond Cut Quality", y = "Count", fill = "Clarity")
# Draw the same chart, but with the coordinate system flipped
bar + coord_flip()
# Install and load the `ggplot2` package
# install.packages('ggplot2')
library("ggplot2")
# For this exercise you will again be working with the `diamonds` data set.
# Use `?diamonds` to review details about this data set
?diamonds
# Draw a column (bar) chart of diamonds cuts by price, with each bar filled by
# clarity. You should see a _stacked_ bar chart.
ggplot(data = diamonds) +
geom_col(mapping = aes(x = cut, y = price, fill = clarity))
# Draw the same chart again, but with each element positioned to "fill" the y axis
ggplot(data = diamonds) +
geom_col(mapping = aes(x = cut, y = price, fill = clarity), position = "fill")
# Draw the same chart again, but with each element positioned to "dodge" each other
ggplot(data = diamonds) +
geom_col(mapping = aes(x = cut, y = price, fill = clarity), position = "dodge")
# Draw a plot with point geometry with the x-position mapped to `cut` and the
# y-position mapped to `clarity`
# This creates a "grid" grouping the points
ggplot(data = diamonds) +
geom_point(mapping = aes(x = cut, y = clarity))
# Use the "jitter" position adjustment to keep the points from all overlapping!
# (This works a little better with a sample of diamond data, such as from the
# previous exercise).
ggplot(data = diamonds) +
geom_point(mapping = aes(x = cut, y = clarity), position = "jitter")
# Draw a "boxplot" (with `geom_boxplot`) for the diamond's price (y) by color (x)
ggplot(data = diamonds) +
geom_boxplot(mapping = aes(x = color, y = price))
# This has a lot of outliers, making it harder to read. To fix this, draw the
# same plot but with a _logarithmic_ scale for the y axis.
ggplot(data = diamonds) +
geom_boxplot(mapping = aes(x = color, y = price)) +
scale_y_log10()
# For another version, draw the same plot but with `violin` geometry instead of
# `boxplot` geometry!
# How does the logarithmic scale change the data presentation?
ggplot(data = diamonds) +
geom_violin(mapping = aes(x = color, y = price)) +
scale_y_log10()
# Another interesting plot: draw a plot of the diamonds price (y) by carat (x),
# using a heatmap of 2d bins (geom_bin2d)
# What happens when you make the x and y channels scale logarithmically?
ggplot(data = diamonds) +
geom_bin2d(mapping = aes(x = carat, y = price)) +
scale_x_log10() +
scale_y_log10()
# Draw a scatter plot for the diamonds price (y) by carat (x). Color each point
# by the clarity (Remember, this will take a while. Use a sample of the diamonds
# for faster results)
ggplot(data = diamonds) +
geom_point(mapping = aes(x = carat, y = price, color = clarity))
# Change the color of the previous plot using a ColorBrewer scale of your choice.
# What looks nice?
ggplot(data = diamonds) +
geom_point(mapping = aes(x = carat, y = price, color = clarity)) +
scale_color_brewer(palette = "Spectral")
# Draw a bar chart with x-position and fill color BOTH mapped to cut
# For best results, SET the `width` of the geometry to be 1 (fill plot, no space
# between)
# TIP: You can save the plot to a variable for easier modifications
bar <- ggplot(data = diamonds) +
geom_bar(mapping = aes(x = cut, fill = cut), width = 1)
# Change the color of the previous plot using a ColorBrewer scale of your choice.
# What looks nice?
ggplot(data = diamonds) +
geom_point(mapping = aes(x = carat, y = price, color = clarity)) +
scale_color_brewer(palette = "Spectral")
# Draw a bar chart with x-position and fill color BOTH mapped to cut
# For best results, SET the `width` of the geometry to be 1 (fill plot, no space
# between)
# TIP: You can save the plot to a variable for easier modifications
bar <- ggplot(data = diamonds) +
geom_bar(mapping = aes(x = cut, fill = cut), width = 1)
bar <- ggplot(data = diamonds) +
geom_bar(mapping = aes(x = cut, fill = cut), width = 1)
bar
# Change the color of the previous plot using a ColorBrewer scale of your choice.
# What looks nice?
ggplot(data = diamonds) +
geom_point(mapping = aes(x = carat, y = price, color = clarity)) +
scale_color_brewer(palette = "Spectral")
# Draw a bar chart with x-position and fill color BOTH mapped to cut
# For best results, SET the `width` of the geometry to be 1 (fill plot, no space
# between)
# TIP: You can save the plot to a variable for easier modifications
ggplot(data = diamonds) +
geom_bar(mapping = aes(x = cut, fill = cut), width = 1)
# Draw a bar chart with x-position and fill color BOTH mapped to cut
# For best results, SET the `width` of the geometry to be 1 (fill plot, no space
# between)
# TIP: You can save the plot to a variable for easier modifications
ggplot(data = diamonds) +
geom_bar(mapping = aes(x = cut, fill = cut), width = 1)+
ggtitle('Diamonds Plot: price vs cut')
# Draw a bar chart with x-position and fill color BOTH mapped to cut
# For best results, SET the `width` of the geometry to be 1 (fill plot, no space
# between)
# TIP: You can save the plot to a variable for easier modifications
ggplot(data = diamonds) +
geom_col(mapping = aes(x = cut, fill = cut), width = 1)+
ggtitle('Diamonds Plot: price vs cut')
# Draw a bar chart with x-position and fill color BOTH mapped to cut
# For best results, SET the `width` of the geometry to be 1 (fill plot, no space
# between)
# TIP: You can save the plot to a variable for easier modifications
ggplot(data = diamonds) +
geom_bar(mapping = aes(x = cut, fill = cut), width = 1)+
ggtitle('Diamonds Plot: price vs cut')
shiny::runApp('app')
runApp('app1')
runApp('app2')
runApp('app2')
runApp('app2')
runApp('app2')
runApp('app2')
runApp('app2')
runApp('app2')
runApp('app2')
setwd("~/Desktop/data/shiny")
shiny::runApp()
runApp()
runApp()
runApp()
